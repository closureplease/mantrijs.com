extends layout

block content
  .container
    .row-fluid
      .span7
        .hero-unit
          .home-header
            h1
              span.project-name Mantri
              span.tag-line Dependency System
      .span5
        a.brand-firstpage(href='/')
          span.logo
    .row-fluid
      .span9.page.hero-unit
        .row
          .span12
            .why.left
              h2 Why a new system?
              p Medium to Large web applications require a robust system to manage their dependencies. While module loaders excel at interoperating with external libraries, they can <a href="http://thanpol.as/javascript/why-i-dont-like-amd-and-what-i-will-do-about-it/" alt="Why I Don't Like AMD And What I Will Do About It">become difficult</a> to <a href="http://jamisondance.com/2012/7/27/mocking-dependencies-for-unit-testing-with-require-js/" alt="Mocking Dependencies For Unit Testing With require.js">work with</a> when used as dependency systems. A new system should allow the code to be easily tested, debuged and get out of the way after the build process. Meet Mantri!

            .why.right
              h2 Why use Mantri?
              p Harder, Better, Faster, Stronger. Mantri leaves no footprint on your deployed file, which means faster delivery of your app. Provides dead easy testing by exposing all your methods and properties on development, hides them on production. Simple and lean <code>provide</code> and <code>require</code> statements, and a complete workflow to build your codebase.
        .row
          .span12.technology
            h2 How Mantri works
            P Mantri uses <a href="http://addyosmani.com/blog/essential-js-namespacing/" alt="Essential Javascript Namespacing Patterns by Addy Osmani">Namespaces</a>. Each file provides a namespace and can require any number of other namespaces.
            pre
              code
                |goog.provide('foo.bar'); // I provide this namespace.
                |goog.require('foo.baz'); // I require this namespace.
              code
                |// The result is a giant dependency tree.

            p When developing, all your files are loaded synchronously before <a href="https://developer.mozilla.org/en-US/docs/Mozilla_event_reference/DOMContentLoaded_(event)" title="MDN DOMContentLoaded event">DOMContentLoaded event</a> fires, just like your code would evaluate when packaged and minified. Using modern day build flows, Mantri will build your application removing all the <code>provide</code> and <code>require</code> statements.
            p Here is a breakdown of what happens when you do a page load during development, just hover over the diagram.
            figure.page-load
              img(src='https://docs.google.com/drawings/d/1BoxwLKDjwAD0UmPirhy3_YvcVmcL1cHH6yMSO6uTjLc/pub?w=786&amp;h=1524', alt='Mantri Development Diagram')
              figcaption Mantri page loading sequence
            p Mantri wraps around the powerfull <a href="https://developers.google.com/closure/" alt="Google Closure Tools">Google Closure Tools</a>, the same tools used by most of Google's web assets. These tools were build for the purpose of easily managing and maintaining large codebases. Mantri lowers the barier of entry by abstracting all the complexity of such sofisticated systems. In other words, Mantri will be there for you from the second file up to thousands.

      .span3
        .well.sidebar-nav
          .latest-version
            h3 Latest Version
            ul
              li Stable: v0.1.1
              li Development: N/A

          .getting-started
            h3 Getting Started
            block gettingStarted

          .goat-pose
            img(src='/img/goat-pose-180.png', alt='Mantri Goat')

    .row-fluid
      .span12.hero-unit
        .row
          .span8.offset4
            h2 Writing Modular Code
            p Writing Modular Code has everything to do with <a href="https://en.wikipedia.org/wiki/Modular_programming" alt="wikipedia article about Modular Programming">modular programming</a> and nothing to do with module definitions (<a href="http://www.commonjs.org/specs/modules/1.0/" alt="Common JS">CJS</a>, <a href="https://github.com/amdjs/amdjs-api/wiki/AMD" alt="Wikipedia :: The Asynchronous Module Definition (AMD) API">AMD</a>, <a href="http://wiki.ecmascript.org/doku.php?id=harmony:modules" alt="The proposal for a module system for ECMAScript">harmony</a>). You can write perfectly modular code by <a html="http://thanpol.as/javascript/development-using-namespaces/" alt="Development Using Namespaces by thanpolas">using namespaces</a>. It is always interesting to go back where you started and discover something new...
            h3 Busting Myths
            ul.module-myths
              li Modern day build flows have changed the way we work.
              li The development environment is decoupled from production.
              li Module Definition Patterns and <em>Module</em> Loaders are two different things.
              li Modules !== Files
              li Modular Programming is not a trademark of AMD, CJS or any Module Definition Pattern.
              li Developing using Namespaces improves visibility throughout the project, enhances maintainability and enables scalable code.
        .row
          .span8.offset4
            h3 Getting Started
            p Mantri consists of the Web Runtime and the Command Line Tools. The Web Runtime's job is to load the files of your application during development. The Command Line Tools perform various tasks like building your application and calculating dependencies.
            p Read the <a href="/getting-started/">Getting Started</a> guide for instructions on using Mantri.
        .row.support
          .span4.offset8
            h4 Support
            p I'd love to help, find me lurking on Freenode in #grunt or just ping me on twitter <a href="https://twitter.com/thanpolas" alt"Thanasis Polychronakis on Twitter">@thanpolas</a>.

